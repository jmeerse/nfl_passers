#only need to install packages once
install.packages("tidyverse")
install.packages("nflfastR")
install.packages("ggimage")
install.packages("gt")
install.packages("remotes")
library(remotes)
remotes::install_github("jthomasmock/gtExtras")

#need to load libraries every time you run the program
library(tidyverse)
library(nflfastR)
library(ggimage)
library(gt)
library(gtExtras)
library(remotes)


#various ways to load play-by-play data

pbp <- load_pbp(2020:2021)
pbp_21$passer_player_name[pbp_21$passer_player_name == "Jos.Allen"] <- "J.Allen" #Josh allen got recoded only during week 3 2021
pbp_21$passer_player_name[pbp_21$passer_player_name == "Aa.Rodgers"] <- "A.Rodgers" #Aaron Rodgers also got recoded 

pbp_20 <- load_pbp(2020)
pbp_21 <- load_pbp(2021)
pbp_21$passer_player_name[pbp_21$passer_player_name == "Jos.Allen"] <- "J.Allen"

  
#trying to measure after sack for every qb
pbpp <- pbp_21 %>%
  filter(pass == 1) %>%
  filter(!is.na(passer_player_name)) %>% 
  group_by(passer_player_name) %>% 
  filter(n() > 150) %>% 
  ungroup()

#select important info
pbpp <- pbpp %>% select(week, passer_player_name, air_yards, series_result, qb_epa, epa, air_epa, 
                wpa, sack, cpoe, complete_pass, interception, fumble, 
                qb_hit, receiver_player_name, posteam)

#sort by passer and play number - hopefully get sequential plays
pbpps <- arrange(pbpp, passer_player_name, week)

#counting total plays by passer
TotPlays <- pbpps %>% 
  group_by(passer_player_name) %>% 
  summarise(plays = n(), sacks = sum(sack), fumbles = sum(fumble), interceptions = sum(interception), sack_rate = sacks/plays)

#new variables
pbpps <- pbpps %>%
  mutate(air_yards_as = "", qb_epa_as = "", epa_as = "", 
         air_epa_as = "", wpa_as = "", cpoe_as = "", complete_pass_as = "",
         receiver_player_name_as = "")


#grabs after sack air yards
pbpps$air_yards_as <- if_else((pbpps$passer_player_name == lead(pbpps$passer_player_name)) & ((pbpps$sack == 1) | (pbpps$interception == 1) | (pbpps$fumble == 1)) , 
                              lead(pbpps$air_yards), 
                              NULL)
#have to do the same for all the other _as variables, but just change variable name
pbpps$qb_epa_as <- if_else((pbpps$passer_player_name == lead(pbpps$passer_player_name)) & ((pbpps$sack == 1) | (pbpps$interception == 1) | (pbpps$fumble == 1)) , 
                              lead(pbpps$qb_epa), 
                              NULL)
pbpps$epa_as <- if_else((pbpps$passer_player_name == lead(pbpps$passer_player_name)) & ((pbpps$sack == 1) | (pbpps$interception == 1) | (pbpps$fumble == 1)) , 
                              lead(pbpps$epa), 
                              NULL)
pbpps$wpa_as <- if_else((pbpps$passer_player_name == lead(pbpps$passer_player_name)) & ((pbpps$sack == 1) | (pbpps$interception == 1) | (pbpps$fumble == 1)) , 
                              lead(pbpps$wpa), 
                              NULL)
pbpps$cpoe_as <- if_else((pbpps$passer_player_name == lead(pbpps$passer_player_name)) & ((pbpps$sack == 1) | (pbpps$interception == 1) | (pbpps$fumble == 1)) , 
                              lead(pbpps$cpoe), 
                              NULL)
pbpps$complete_pass_as <- if_else((pbpps$passer_player_name == lead(pbpps$passer_player_name)) & ((pbpps$sack == 1) | (pbpps$interception == 1) | (pbpps$fumble == 1)) , 
                              lead(pbpps$complete_pass), 
                              NULL)
pbpps$receiver_player_name_as <- if_else((pbpps$passer_player_name == lead(pbpps$passer_player_name)) & ((pbpps$sack == 1) | (pbpps$interception == 1) | (pbpps$fumble == 1)) , 
                              lead(pbpps$receiver_player_name), 
                              NULL)

#epa etc for good plays
stats_ns <- pbpps %>% 
  filter(sack != 1, interception != 1, fumble != 1) %>% 
  group_by(passer_player_name) %>% 
  summarise(g_epa = mean(epa, na.rm = T), g_cpoe = mean(cpoe, na.rm = T), g_air_yards = mean(air_yards, na.rm = T), team = last(posteam))

#same, but for sacks etc
stats_as <- pbpps %>% 
  filter(sack == 1 | interception == 1 | fumble == 1) %>% 
  group_by(passer_player_name) %>% 
  summarise(as_epa = mean(epa_as, na.rm = T), as_cpoe = mean(cpoe_as, na.rm = T), as_air_yards = mean(air_yards_as, na.rm = T))

# combine good plays and after-sack plays  -- need to attach team name color logos etc
stats <- left_join(stats_ns, stats_as, by = "passer_player_name")

#puts logos and colors on
stats <- stats %>%
+   left_join(teams_colors_logos, by = c("team" = "team_abbr"))

#difference good - after sack
stats <- stats %>% 
  mutate(air_diff = as_air_yards - g_air_yards, 
         cpoe_diff = as_cpoe - g_cpoe, 
         epa_diff = as_epa - g_epa
  )

#makes a plot that connects each type of stat
stats %>%
  ggplot(aes(x = g_air_yards, xend =as_air_yards,  y = fct_reorder(passer_player_name, g_air_yards))) +
  geom_dumbbell(aes(fill = team_color, color = team_color), size = 1.5) +
  geom_point(aes(fill = team_color2), size = 2, shape = 21, stroke = .7) +
  scale_color_identity(aesthetics = c("fill", "color")) +
  theme_bw() +
  theme(panel.background = element_rect(fill = "#9CC371"),
        panel.grid.minor.x = element_blank()) +
  scale_x_continuous(breaks = seq(5,15,1)) +
  labs(x = "Average Air Yards - from reg play to after setback play",
       y = "",
       title = "2021 QB Play After a Setback",
       subtitle = "Next Pass After an Interception, Fumble, or Sack",
       caption = "@jmeerse  Data: nflfastr") +
  theme(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
        plot.subtitle = element_text(size = 10, hjust = 0.5),
        panel.grid.major.y = element_line(size = 0.1)) +
  annotate("segment", x = stats$g_air_yards, xend = stats$as_air_yards, y = stats$passer_player_name, yend = stats$passer_player_name,
           color = stats$team_color, arrow = arrow(length =unit(3,"mm"))) +
  geom_text(data=stats, aes(x=as_air_yards, y=passer_player_name, label=air_diff),
            color=stats$team_color, size=2.75, vjust=-0.5)

 
#______________________________________________________________________________________________________________________________________________________________________
#below this is just looking at one QB

#filter to specific QB -- need to know passer_player_name (and note that Josh Allen's name got changed midway through 2021, hence the "or" | statement
JAllen_21 <- pbp_21 %>%
  filter(passer_player_name == 'J.Allen' | passer_player_name == 'Jos.Allen')

#need to create a play_num variable  
JAllen_21 <- JAllen_21 %>%
  mutate(play_num = row_number())


#create week by week total epa
JAllen_21_wk_epa <- JAllen_21 %>% group_by(week) %>%
  summarise(epa = sum(qb_epa))

#make a graph
ggplot(JAllen_21_wk_epa, aes(x=week, y=epa, group=1)) +
  geom_line()+
  geom_point()

# create air yards after sack variable lead takes at next value; should do this for every stat you want to measure after a sack - can combine into one mutate command
JAllen_21 <- JAllen_21 %>% 
  mutate(air_yards_as = lead(JAllen_21$air_yards))
  

#create after sack data frame
JAllen_21_as <- JAllen_21 %>% filter(sack == 1)

#______________________________________________________________________________________________________________________________________________________________________
#looking at cumulative epa and wpa

qbs <- pbp_21 %>% 
  filter(pass == 1) %>% 
  group_by(passer_player_name) %>% 
  filter(n() > 150)

qbs <- qbs %>% select(week, passer_player_name, posteam, qb_epa, wpa)
qbs <- arrange(qbs, passer_player_name, week)

qbs <- qbs %>% mutate(play_num = seq_along(passer_player_name))

logos_df <- qbs %>%
  group_by(posteam) %>%
  summarise(
    tot_wpa = last(sum_wpa),
    tot_epa = last(sum_epa),
    last_play = max(play_num)
  ) %>%
  left_join(teams_colors_logos, by=c("posteam"="team_abbr"))


#qb wpa for season
qb_wpa <- ggplot()+
  geom_hline(yintercept=0, size=1, color="black")+
  geom_line(aes(x=qbs$play_num, y=qbs$sum_wpa,color=qbs$posteam,alpha=ifelse(qbs$posteam=="BUF"|qbs$posteam=="NE", 1, .8)),size=1.5, show.legend = FALSE)+
  geom_image(aes(x=logos_df$last_play, y=logos_df$tot_wpa, image = logos_df$team_logo_espn), size = 0.045, by = "width", asp = 16/9)+
  scale_color_manual(values=c("ARI"="#97233f", "ATL"="#a71930", "BAL"="#241773", "BUF"="#00338d", "CAR"="#0085ca","CHI"="#0b162a","CIN"="#000000","CLE"="#fb4f14",
                              "DAL"="#002244", "DEN"="#002244","DET"="#005a8b", "GB"="#203731","HOU"="#03202f","IND"="#002c5f", "JAX"="#000000","KC"="#e31837",
                              "LAC"="#002244","LA"="#002244","MIA"="#008e97","MIN"="#4f2683","NE"="#002244","NO"="#9f8958","NYG"="#0b2265","NYJ"="#125740","OAK"="#a5acaf",
                              "PHI"="#004953","PIT"="#000000","SD"="#002244","SF"="#aa0000","SEA"="#69be28","STL"="#002244","TB"="#d50a0a","TEN"="#4095d1","WAS"="#773141")) +
  scale_x_continuous(breaks=seq(0,500,50), expand=c(.02,0))+
  scale_y_continuous(breaks=seq(-200,800,50), expand=c(.01,0))+
  theme_bw() +
  theme(panel.background=element_blank()) +
  theme(plot.background=element_rect(fill="#FFFFFF")) +
  theme(panel.border = element_blank()) +
  theme(panel.grid.major= element_blank()) +
  theme(axis.text.x=element_text(angle = 50, vjust = 0.5,    size=11,colour="#535353",face="bold")) +
  theme(axis.text.y=element_text(size=11,colour="#535353",face="bold")) +
  theme(axis.title.y=element_text(size=11,colour="#535353",face="bold",vjust=1.5)) +
  theme(axis.title.x=element_text(size=11,colour="#535353",face="bold",vjust=-.5)) +
  theme(plot.title=element_text(face="bold", colour="#006ebb",size=18, family = "Dense")) +
  theme(plot.subtitle=element_text(colour = "#006ebb", size = 12, family = "Dense")) +
  theme(axis.ticks = element_blank()) +
  theme(aspect.ratio = 9 / 16) +
  xlab("Total Number of Plays") +
  ylab("Cumulative WPA")

qb_wpa

ggplot(logos_df, aes(x = tot_wpa, y = tot_epa)) + 
  geom_point() + 
  geom_image(aes(x=tot_wpa, y=tot_epa, image = team_logo_espn), 
             size = 0.045, by = "width", asp = 16/9) +
  geom_hline(yintercept = mean(logos_df$tot_epa, na.rm = T)) +
  geom_vline(xintercept = mean(logos_df$tot_wpa, na.rm = T))


# do we need to filter out na's for epa?  This does it maybe
JA_20_s <- JAllen_20 %>%
  filter(sack == 1) %>%
  filter (!is.na(epa))
